apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    {{- include "dbcall.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "dbcall.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  {{- if .Values.global.dbcall.corezoid_dbcall.minReplicas }}
  replicas: {{ .Values.global.dbcall.corezoid_dbcall.minReplicas }}
  {{- else }}
  replicas: {{ .Values.scale.minReplicas }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/dbcall-configmap.yaml") . | sha256sum }}
      labels:
        {{- include "dbcall.labels" . | nindent 8 }}
    spec:
      {{ if .Values.global.dbcall.corezoid_dbcall.affinity }}
      affinity:
        {{ .Values.global.dbcall.corezoid_dbcall.affinity | toYaml | nindent 8 | trim }}
      {{- end }}
      terminationGracePeriodSeconds: 40
      containers:
        - name: {{ .Values.appName }}
          image: {{ include "dbcall.imageUrl" . | quote }}
          env:
          - name: APP_ENV
            value: production
          - name: RABBIT_HOST
            valueFrom:
              secretKeyRef:
                name: {{ include "dbcall.rabbitSecretName" . }}
                key: host
          - name: RABBIT_PORT
            valueFrom:
              secretKeyRef:
                name: {{ include "dbcall.rabbitSecretName" . }}
                key: port
          - name: RABBIT_VHOST
            valueFrom:
              secretKeyRef:
                name: {{ include "dbcall.rabbitSecretName" . }}
                key: vhost
          - name: RABBIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "dbcall.rabbitSecretName" . }}
                key: username
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "dbcall.rabbitSecretName" . }}
                key: password
          command: ["./dbcall"]
          args: ["--config=/go/bin/config/production.json"]
          ports:
            - name: application
              containerPort: {{ .Values.appPort }}
              protocol: TCP
            {{- if .Values.global.serviceMonitor }}
            {{- if .Values.global.serviceMonitor.enabled }}
            - name: monitoring
              containerPort: {{ .Values.metricsPort }}
              protocol: TCP
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: {{ .Values.appName }}-config
              mountPath: /go/bin/config/production.json
              subPath: production.json
          {{- include "dbcall.corezoid_dbcall.resources" . | indent 10 }}
          readinessProbe:
            httpGet:
              port: {{ .Values.readinessPort }}
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: {{ .Values.livenessPort }}
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          securityContext:
            runAsUser: 501
            runAsGroup: 501
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            capabilities:
              drop:
                - NET_ADMIN
                - SYS_ADMIN
                - MAC_ADMIN
                - SETUID
                - SETGID
                - FOWNER
                - CHOWN
                - MKNOD
{{- if not (eq .Values.global.repotype "public") }}
{{- include "common.imagePullSecrets" . | nindent 6 }}
{{- end }}
      volumes:
        - name: {{ .Values.appName }}-config
          configMap:
            name: {{ .Values.appName }}-config
